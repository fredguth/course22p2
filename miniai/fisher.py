# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/9b_FisherCallback.ipynb.

# %% ../nbs/9b_FisherCallback.ipynb 5
from __future__ import annotations
import random,math,torch,matplotlib as mpl,numpy as np,matplotlib.pyplot as plt
import fastcore.all as fc
from pathlib import Path
from operator import attrgetter,itemgetter
from functools import partial
from copy import copy
from torch import tensor,nn,optim
import torch.nn.functional as F
from torch.distributions import Categorical
import torchvision.transforms.functional as TF
from datasets import load_dataset
import time
from .datasets import *
from .learner import *
from torcheval.metrics import MulticlassAccuracy,Mean
from tqdm.auto import tqdm

# %% auto 0
__all__ = ['FisherCB']

# %% ../nbs/9b_FisherCallback.ipynb 16
from nngeometry.metrics import FIM, FIM_MonteCarlo
from nngeometry.object import PMatKFAC, PMatDiag, PVector
import time

# %% ../nbs/9b_FisherCallback.ipynb 23
class FisherCB(Callback):
    def __init__(self, representation = PMatKFAC): 
        fc.store_attr()
        self.Fs = []
    def _log(self, d): print({**d, **self.learn.epoch, **self.learn.training})
    def before_fit(self): self.learn.fisher = self
    def after_epoch(self):
        if not self.learn.model.training: raise CancelEpochException()
        else:
            F = FIM(model=learn.model,
                 loader=learn.dls.valid,
                 representation=self.representation,
                 n_output=10,
                 variant='classif_logits',
                 device='cuda')
            self.Fs.append(F)
